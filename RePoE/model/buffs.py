# generated by datamodel-codegen:
#   filename:  buffs.schema.json

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, ConfigDict, RootModel


class Source(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: Optional[str] = None
    item: Optional[str] = None
    name: Optional[str] = None
    template: Optional[str] = None
    stat_text: Optional[List[str]] = None
    stats: Optional[Dict[str, int]] = None


class Template(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    aura_radius_metres: Optional[float] = None
    stats: Optional[Dict[str, int]] = None
    stat_text: Optional[List[str]] = None
    visuals: Optional[str] = None


class Category(Enum):
    Debuff = "Debuff"
    Charge = "Charge"
    Buff = "Buff"
    Active_skill = "Active skill"
    Aspect = "Aspect"
    PVP_team = "PVP team"
    Link = "Link"
    PVP_flag = "PVP flag"
    Mark = "Mark"
    Hex = "Hex"
    Stolen = "Stolen"
    Flask = "Flask"
    Labyrinth_trap = "Labyrinth trap"
    Herald = "Herald"
    Buff_shrine = "Buff shrine"
    Spell_shrine = "Spell shrine"
    Tincture = "Tincture"


class Sources(RootModel[Optional[Dict[str, List[Source]]]]):
    root: Optional[Dict[str, List[Source]]] = None


class BuffsSchemaValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    description: str
    invisible: bool
    name: str
    removable: bool
    stats: List[str]
    visuals: str
    category: Optional[Category] = None
    sources: Optional[Sources] = None
    templates: Optional[Dict[str, Template]] = None
    stack_limit: Optional[int] = None


class Model(RootModel[Optional[Dict[str, BuffsSchemaValue]]]):
    root: Optional[Dict[str, BuffsSchemaValue]] = None
