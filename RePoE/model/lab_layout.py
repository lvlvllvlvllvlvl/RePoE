# generated by datamodel-codegen:
#   filename:  lab_layout.schema.json

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, ConfigDict, RootModel


class Group(Enum):
    MandatoryGoldDoor = "MandatoryGoldDoor"


class Override(Enum):
    BottleneckOverride = "BottleneckOverride"
    Weylin03 = "Weylin03"
    Weylin04 = "Weylin04"
    FinalBossEasy = "FinalBossEasy"
    FinalBoss = "FinalBoss"
    AirlockEntry = "AirlockEntry"
    Boss1_Sec1 = "Boss1_Sec1"
    Boss2_Sec1 = "Boss2_Sec1"
    Weylin01 = "Weylin01"
    Weylin02 = "Weylin02"
    Boss2_Sec2 = "Boss2_Sec2"
    Boss1_Sec2 = "Boss1_Sec2"


class Secret(Enum):
    SilverKey = "SilverKey"
    SilverDoorReward = "SilverDoorReward"
    GoldKey = "GoldKey"
    GoldDoor = "GoldDoor"
    Gauntlet = "Gauntlet"
    GoldDoorModal = "GoldDoorModal"
    Trinket = "Trinket"


class Room(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    areas: List[str]
    connections: List[int]
    override: Optional[Override] = None
    row_id: int
    x: float
    y: float
    secret_1: Optional[Secret] = None
    secret_2: Optional[Secret] = None


class Section(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    difficulty: int
    rooms: List[Room]
    section: int
    group: Optional[Group] = None


class LabLayoutSchema(RootModel[Optional[Dict[str, Section]]]):
    root: Optional[Dict[str, Section]] = None


class Model(RootModel[LabLayoutSchema]):
    root: LabLayoutSchema
