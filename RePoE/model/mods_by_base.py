# generated by datamodel-codegen:
#   filename:  mods_by_base.schema.json
#   timestamp: 2024-05-08T10:03:25+00:00

from __future__ import annotations

from typing import Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, RootModel


class ModWeights(RootModel[Optional[Dict[str, int]]]):
    root: Optional[Dict[str, int]] = None


class SynthModGroups(RootModel[Optional[Dict[str, List[str]]]]):
    root: Optional[Dict[str, List[str]]] = None


class EssenceMods(RootModel[Optional[Dict[str, str]]]):
    root: Optional[Dict[str, str]] = None


class ModTypes(RootModel[Optional[Dict[str, ModWeights]]]):
    root: Optional[Dict[str, ModWeights]] = None


class EssenceModLevels(RootModel[Optional[Dict[str, EssenceMods]]]):
    root: Optional[Dict[str, EssenceMods]] = None


class GenerationTypes(RootModel[Optional[Dict[str, ModTypes]]]):
    root: Optional[Dict[str, ModTypes]] = None


class TagSet(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    bases: List[str]
    mods: GenerationTypes


class TagSets(RootModel[Optional[Dict[str, Union[TagSet, SynthModGroups, EssenceModLevels]]]]):
    root: Optional[Dict[str, Union[TagSet, SynthModGroups, EssenceModLevels]]] = None


class ItemClasses(RootModel[Optional[Dict[str, TagSets]]]):
    root: Optional[Dict[str, TagSets]] = None


class Model(RootModel[ItemClasses]):
    root: ItemClasses
