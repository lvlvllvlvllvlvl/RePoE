# generated by datamodel-codegen:
#   filename:  stat_value_handlers.schema.json
#   timestamp: 2024-05-08T08:05:17+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Type(Enum):
    int = 'int'


class TqNoop(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type = Field(..., title='Type')


class IntHandler(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    addend: Optional[int] = None
    divisor: Optional[int] = None
    multiplier: Optional[int] = None
    precision: Optional[int] = None
    fixed: Optional[bool] = None
    type: Type


class Type2(Enum):
    string = 'string'


class CanonicalLine(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type2


class Predicate(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    column: Optional[str] = None
    value: Optional[Any] = None


class StatValueHandlersSchema(BaseModel):
    reminderstring: CanonicalLine
    tq_noop: TqNoop


class RelationalData(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dat_file: str
    index_column: str
    type: Type2
    value_column: str
    values: Dict[str, str]
    predicate: Optional[Predicate] = None


class Model(RootModel[StatValueHandlersSchema]):
    root: StatValueHandlersSchema
