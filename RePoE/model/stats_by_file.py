# generated by datamodel-codegen:
#   filename:  stats_by_file.schema.json

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional, Union

from pydantic import BaseModel, RootModel


class Type(Enum):
    literal = "literal"


class Literal(BaseModel):
    type: Type
    value: str


class Type1(Enum):
    number = "number"


class NumberRule(BaseModel):
    type: Type1
    index: int
    stat: str
    stat_value_handlers: Optional[List[str]] = None


class Type2(Enum):
    enum = "enum"


class EnumRule(BaseModel):
    type: Type2
    index: int
    stat: str
    stat_value_handler: str


class Type3(Enum):
    unknown = "unknown"


class UnknownRule(BaseModel):
    type: Type3
    index: int
    stat: str
    stat_value_handler: Optional[str] = None


class Token(RootModel[Union[Literal, NumberRule, EnumRule, UnknownRule]]):
    root: Union[Literal, NumberRule, EnumRule, UnknownRule]


class Stat(BaseModel):
    files: List[str]
    generated_name: str
    tokens: List[Token]


class Model(RootModel[Optional[Dict[str, Stat]]]):
    root: Optional[Dict[str, Stat]] = None
